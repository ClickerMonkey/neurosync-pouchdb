{"version":3,"sources":["rekord-pouchdb.js"],"names":["PouchDB","Rekord","global","undefined","Debugs","POUCH_INIT","POUCH_ALL","POUCH_ALL_ERROR","POUCH_GET","POUCH_GET_ERROR","POUCH_CREATE","POUCH_CREATE_ERROR","POUCH_UPDATE","POUCH_UPDATE_ERROR","POUCH_REMOVE","POUCH_REMOVE_ERROR","POUCH_LIVE_REMOVE","POUCH_LIVE_SAVE","POUCH_LIVE_SAVE_IGNORE","debugMap","cache","Rekord_live","live","Rekord_rest","rest","store","pouch","name","options","restSet","database","api","call","this","fullSave","Cache","None","origin","uuid","storeOptions","include_docs","replicate","retry","debug","pouchdb","all","success","failure","onAll","response","values","i","rows","length","push","doc","onAllError","err","status","allDocs","then","get","model","onGet","key","_rev","onGetError","String","$key","create","encoded","onCreate","ok","rev","onCreateError","_id","$origin","put","update","onUpdate","onUpdateError","remove","onRemove","onRemoveError","query","liveSet","onLiveChange","change","deleted","liveRemove","id","liveSave","since","changes","on","save","noop"],"mappings":"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","file":"rekord-pouchdb.min.js","sourcesContent":["(function(PouchDB, Rekord, global, undefined)\n{\n\n  Rekord.Debugs.POUCH_INIT = 2000;\n  Rekord.Debugs.POUCH_ALL = 2001;\n  Rekord.Debugs.POUCH_ALL_ERROR = 2002;\n  Rekord.Debugs.POUCH_GET = 2003;\n  Rekord.Debugs.POUCH_GET_ERROR = 2004;\n  Rekord.Debugs.POUCH_CREATE = 2005;\n  Rekord.Debugs.POUCH_CREATE_ERROR = 2006;\n  Rekord.Debugs.POUCH_UPDATE = 2007;\n  Rekord.Debugs.POUCH_UPDATE_ERROR = 2008;\n  Rekord.Debugs.POUCH_REMOVE = 2009;\n  Rekord.Debugs.POUCH_REMOVE_ERROR = 2010;\n  Rekord.Debugs.POUCH_LIVE_REMOVE = 2011;\n  Rekord.Debugs.POUCH_LIVE_SAVE = 2012;\n  Rekord.Debugs.POUCH_LIVE_SAVE_IGNORE = 2013;\n\n  if ( Rekord.debugMap )\n  {\n    Rekord.debugMap[ Rekord.Debugs.POUCH_INIT ] = 'PouchDB Initialized';\n    Rekord.debugMap[ Rekord.Debugs.POUCH_ALL ] = 'PouchDB All';\n    Rekord.debugMap[ Rekord.Debugs.POUCH_ALL_ERROR ] = 'PouchDB All Error';\n    Rekord.debugMap[ Rekord.Debugs.POUCH_GET ] = 'PouchDB Get';\n    Rekord.debugMap[ Rekord.Debugs.POUCH_GET_ERROR ] = 'PouchDB Get Error';\n    Rekord.debugMap[ Rekord.Debugs.POUCH_CREATE ] = 'PouchDB Create';\n    Rekord.debugMap[ Rekord.Debugs.POUCH_CREATE_ERROR ] = 'PouchDB Create Error';\n    Rekord.debugMap[ Rekord.Debugs.POUCH_UPDATE ] = 'PouchDB Update';\n    Rekord.debugMap[ Rekord.Debugs.POUCH_UPDATE_ERROR ] = 'PouchDB Update Error';\n    Rekord.debugMap[ Rekord.Debugs.POUCH_REMOVE ] = 'PouchDB Remove';\n    Rekord.debugMap[ Rekord.Debugs.POUCH_REMOVE_ERROR ] = 'PouchDB Remove Error';\n    Rekord.debugMap[ Rekord.Debugs.POUCH_LIVE_REMOVE ] = 'PouchDB Live Remove';\n    Rekord.debugMap[ Rekord.Debugs.POUCH_LIVE_SAVE ] = 'PouchDB Live Save';\n    Rekord.debugMap[ Rekord.Debugs.POUCH_LIVE_SAVE_IGNORE ] = 'PouchDB Live Save Ignored';\n  }\n\n  var cache = {};\n\n  var Rekord_live = Rekord.live;\n  var Rekord_rest = Rekord.rest;\n  var Rekord_store = Rekord.store;\n\n  Rekord.pouch = function(name, options)\n  {\n    return name in cache ? cache[ name ] : cache[ name ] = new PouchDB( name, options );\n  };\n\n  if ( !Rekord.restSet )\n  {\n    Rekord.rest = function(database)\n    {\n      if ( !database.api )\n      {\n        return Rekord_rest.call( this, database );\n      }\n\n      database.fullSave = true;\n      database.cache = Rekord.Cache.None;\n      database.origin = Rekord.uuid();\n\n      var pouch = this.pouch( database.name, database.storeOptions );\n\n      var options = {\n        include_docs: true\n      };\n\n      PouchDB.replicate( database.name, database.api, {\n        live: true,\n        retry: true\n      });\n\n      Rekord.debug( Rekord.Debugs.POUCH_INIT, database, pouch );\n\n      return {\n\n        pouchdb: pouch,\n\n        all: function( success, failure )\n        {\n          function onAll(response)\n          {\n            Rekord.debug( Rekord.Debugs.POUCH_ALL, database, response );\n\n            var values = [];\n            for (var i = 0; i < response.rows.length; i++) \n            {\n              values.push( response.rows[ i ].doc );\n            }\n\n            success( values );\n          }\n\n          function onAllError(err)\n          {\n            Rekord.debug( Rekord.Debugs.POUCH_ALL_ERROR, database, err );\n            \n            failure( [], err.status );\n          }\n\n          pouch.allDocs( options ).then( onAll ).catch( onAllError );\n        },\n\n        get: function( model, success, failure )\n        {\n          var key = String( model.$key() );\n\n          function onGet(response)\n          {\n            Rekord.debug( Rekord.Debugs.POUCH_GET, database, model, key, response );\n\n            model._rev = response._rev;\n            success( response );\n          }\n\n          function onGetError(err)\n          {\n            Rekord.debug( Rekord.Debugs.POUCH_GET_ERROR, database, model, key, err );\n\n            failure( null, err.status );\n          }\n\n          pouch.get( key ).then( onGet ).catch( onGetError );\n        },\n\n        create: function( model, encoded, success, failure )\n        {\n          encoded._id = String( model.$key() );\n          encoded.$origin = database.origin;\n\n          function onCreate(response)\n          {\n            Rekord.debug( Rekord.Debugs.POUCH_CREATE, database, model, encoded, response );\n\n            if ( response.ok ) \n            {\n              model._rev = response.rev;\n              encoded._rev = response.rev;\n              success( {} );\n            } \n            else \n            {\n              failure( null, response.status );\n            }\n          }\n\n          function onCreateError(err)\n          {\n            Rekord.debug( Rekord.Debugs.POUCH_CREATE_ERROR, database, model, encoded, err );\n\n            failure( null, err.status );\n          }\n\n          pouch.put( encoded ).then( onCreate ).catch( onCreateError );\n        },\n\n        update: function( model, encoded, success, failure )\n        {\n          encoded._id = String( model.$key() );\n          encoded._rev = model._rev;\n          encoded.$origin = database.origin;\n\n          function onUpdate(response)\n          {\n            Rekord.debug( Rekord.Debugs.POUCH_UPDATE, database, model, encoded, response );\n\n            if ( response.ok ) \n            {\n              model._rev = response.rev;\n              encoded._rev = response.rev;\n              success( {} );\n            } \n            else \n            {\n              failure( null, response.status );\n            }\n          }\n\n          function onUpdateError(err)\n          {\n            Rekord.debug( Rekord.Debugs.POUCH_UPDATE_ERROR, database, model, encoded, err );\n\n            failure( null, err.status );\n          }\n\n          pouch.put( encoded ).then( onUpdate ).catch( onUpdateError );\n        },\n\n        remove: function( model, success, failure )\n        {\n          var key = String( model.$key() );\n\n          function onRemove(response)\n          {\n            Rekord.debug( Rekord.Debugs.POUCH_REMOVE, database, model, key, response );\n\n            if ( response.ok ) \n            {\n              success( {} ); \n            } \n            else \n            {\n              failure( {}, response.status );\n            }\n          }\n\n          function onRemoveError(err)\n          {\n            Rekord.debug( Rekord.Debugs.POUCH_REMOVE_ERROR, database, model, key, err );\n\n            failure( {}, err.status );\n          }\n\n          pouch.remove( key ).then( onRemove ).catch( onRemoveError );\n        },\n\n        query: function( query, success, failure )\n        {\n          success( [] );\n        }\n\n      };\n    };\n\n    Rekord.restSet = true;\n  }\n\n  if ( !Rekord.liveSet )\n  {\n    Rekord.live = function(database)\n    {\n      if ( !database.api )\n      {\n        return Rekord_live.call( this, database );\n      }\n\n      var pouch = this.pouch( database.name );\n      var options = \n      {\n        since: 'now',\n        live: true,\n        include_docs: true\n      };\n\n      function onLiveChange(change)\n      {\n        if ( change.deleted ) \n        {\n          Rekord.debug( Rekord.Debugs.POUCH_LIVE_REMOVE, database, change );\n\n          database.liveRemove( change.id );\n        } \n        else \n        {\n          if ( change.doc.$origin !== database.origin ) \n          {\n            Rekord.debug( Rekord.Debugs.POUCH_LIVE_SAVE, database, change );\n\n            database.liveSave( change.id, change.doc );\n          } \n          else \n          {\n            Rekord.debug( Rekord.Debugs.POUCH_LIVE_SAVE_IGNORE, database, change );\n          }\n        }\n      }\n\n      pouch.changes( options ).on( 'change', onLiveChange );\n\n      return {\n        pouchdb: pouch,\n        save: Rekord.noop,\n        remove: Rekord.noop\n      };\n    };\n\n    Rekord.liveSet = true;\n  }\n\n})( PouchDB, Rekord, this );"],"sourceRoot":"/source/"}