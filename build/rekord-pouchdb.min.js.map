{"version":3,"sources":["rekord-pouchdb.min.js"],"names":["global","PouchDB","Rekord","undefined","pouch","name","options","cache","RestFactory","database","api","Rekord_rest","call","this","fullSave","Cache","None","origin","uuid","storeOptions","include_docs","replicate","live","retry","debug","Debugs","POUCH_INIT","pouchdb","all","success","failure","onAll","response","POUCH_ALL","values","i","rows","length","push","doc","onAllError","err","POUCH_ALL_ERROR","status","allDocs","then","get","model","onGet","POUCH_GET","key","_rev","onGetError","POUCH_GET_ERROR","String","$key","create","encoded","onCreate","POUCH_CREATE","ok","rev","onCreateError","POUCH_CREATE_ERROR","_id","$origin","put","update","onUpdate","POUCH_UPDATE","onUpdateError","POUCH_UPDATE_ERROR","remove","onRemove","POUCH_REMOVE","onRemoveError","POUCH_REMOVE_ERROR","query","url","LiveFactory","onLiveChange","change","deleted","POUCH_LIVE_REMOVE","liveRemove","id","POUCH_LIVE_SAVE","liveSave","POUCH_LIVE_SAVE_IGNORE","Rekord_live","since","changes","on","save","noop","rest","store","debugMap","setRest","setLive"],"mappings":"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","file":"rekord-pouchdb.min.js","sourcesContent":["/* rekord-pouchdb 1.4.1 - A rekord binding to pouchdb - implementing Rekord.rest, Rekord.live, & Rekord.store by Philip Diffenderfer */\n(function(global, PouchDB, Rekord, undefined)\n{\n\n  var Debugs = Rekord.Debugs;\n\n  var cache = {};\n\n  var Rekord_live = Rekord.live;\n  var Rekord_rest = Rekord.rest;\n  var Rekord_store = Rekord.store;\n\n  Debugs.POUCH_INIT = 2000;\n  Debugs.POUCH_ALL = 2001;\n  Debugs.POUCH_ALL_ERROR = 2002;\n  Debugs.POUCH_GET = 2003;\n  Debugs.POUCH_GET_ERROR = 2004;\n  Debugs.POUCH_CREATE = 2005;\n  Debugs.POUCH_CREATE_ERROR = 2006;\n  Debugs.POUCH_UPDATE = 2007;\n  Debugs.POUCH_UPDATE_ERROR = 2008;\n  Debugs.POUCH_REMOVE = 2009;\n  Debugs.POUCH_REMOVE_ERROR = 2010;\n  Debugs.POUCH_LIVE_REMOVE = 2011;\n  Debugs.POUCH_LIVE_SAVE = 2012;\n  Debugs.POUCH_LIVE_SAVE_IGNORE = 2013;\n\n  if ( Rekord.debugMap )\n  {\n    Rekord.debugMap[ Debugs.POUCH_INIT ] = 'PouchDB Initialized';\n    Rekord.debugMap[ Debugs.POUCH_ALL ] = 'PouchDB All';\n    Rekord.debugMap[ Debugs.POUCH_ALL_ERROR ] = 'PouchDB All Error';\n    Rekord.debugMap[ Debugs.POUCH_GET ] = 'PouchDB Get';\n    Rekord.debugMap[ Debugs.POUCH_GET_ERROR ] = 'PouchDB Get Error';\n    Rekord.debugMap[ Debugs.POUCH_CREATE ] = 'PouchDB Create';\n    Rekord.debugMap[ Debugs.POUCH_CREATE_ERROR ] = 'PouchDB Create Error';\n    Rekord.debugMap[ Debugs.POUCH_UPDATE ] = 'PouchDB Update';\n    Rekord.debugMap[ Debugs.POUCH_UPDATE_ERROR ] = 'PouchDB Update Error';\n    Rekord.debugMap[ Debugs.POUCH_REMOVE ] = 'PouchDB Remove';\n    Rekord.debugMap[ Debugs.POUCH_REMOVE_ERROR ] = 'PouchDB Remove Error';\n    Rekord.debugMap[ Debugs.POUCH_LIVE_REMOVE ] = 'PouchDB Live Remove';\n    Rekord.debugMap[ Debugs.POUCH_LIVE_SAVE ] = 'PouchDB Live Save';\n    Rekord.debugMap[ Debugs.POUCH_LIVE_SAVE_IGNORE ] = 'PouchDB Live Save Ignored';\n  }\n\n  function pouch(name, options)\n  {\n    return name in cache ? cache[ name ] : cache[ name ] = new PouchDB( name, options );\n  }\n\n  function RestFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_rest.call( this, database );\n    }\n\n    database.fullSave = true;\n    database.cache = Rekord.Cache.None;\n    database.origin = Rekord.uuid();\n\n    var pouch = this.pouch( database.name, database.storeOptions );\n\n    var options = {\n      include_docs: true\n    };\n\n    PouchDB.replicate( database.name, database.api, {\n      live: true,\n      retry: true\n    });\n\n    Rekord.debug( Debugs.POUCH_INIT, database, pouch );\n\n    return {\n\n      pouchdb: pouch,\n\n      all: function( success, failure )\n      {\n        function onAll(response)\n        {\n          Rekord.debug( Debugs.POUCH_ALL, database, response );\n\n          var values = [];\n          for (var i = 0; i < response.rows.length; i++)\n          {\n            values.push( response.rows[ i ].doc );\n          }\n\n          success( values );\n        }\n\n        function onAllError(err)\n        {\n          Rekord.debug( Debugs.POUCH_ALL_ERROR, database, err );\n\n          failure( [], err.status );\n        }\n\n        pouch.allDocs( options ).then( onAll ).catch( onAllError );\n      },\n\n      get: function( model, success, failure )\n      {\n        var key = String( model.$key() );\n\n        function onGet(response)\n        {\n          Rekord.debug( Debugs.POUCH_GET, database, model, key, response );\n\n          model._rev = response._rev;\n          success( response );\n        }\n\n        function onGetError(err)\n        {\n          Rekord.debug( Debugs.POUCH_GET_ERROR, database, model, key, err );\n\n          failure( null, err.status );\n        }\n\n        pouch.get( key ).then( onGet ).catch( onGetError );\n      },\n\n      create: function( model, encoded, success, failure )\n      {\n        encoded._id = String( model.$key() );\n        encoded.$origin = database.origin;\n\n        function onCreate(response)\n        {\n          Rekord.debug( Debugs.POUCH_CREATE, database, model, encoded, response );\n\n          if ( response.ok )\n          {\n            model._rev = response.rev;\n            encoded._rev = response.rev;\n            success( {} );\n          }\n          else\n          {\n            failure( null, response.status );\n          }\n        }\n\n        function onCreateError(err)\n        {\n          Rekord.debug( Debugs.POUCH_CREATE_ERROR, database, model, encoded, err );\n\n          failure( null, err.status );\n        }\n\n        pouch.put( encoded ).then( onCreate ).catch( onCreateError );\n      },\n\n      update: function( model, encoded, success, failure )\n      {\n        encoded._id = String( model.$key() );\n        encoded._rev = model._rev;\n        encoded.$origin = database.origin;\n\n        function onUpdate(response)\n        {\n          Rekord.debug( Debugs.POUCH_UPDATE, database, model, encoded, response );\n\n          if ( response.ok )\n          {\n            model._rev = response.rev;\n            encoded._rev = response.rev;\n            success( {} );\n          }\n          else\n          {\n            failure( null, response.status );\n          }\n        }\n\n        function onUpdateError(err)\n        {\n          Rekord.debug( Debugs.POUCH_UPDATE_ERROR, database, model, encoded, err );\n\n          failure( null, err.status );\n        }\n\n        pouch.put( encoded ).then( onUpdate ).catch( onUpdateError );\n      },\n\n      remove: function( model, success, failure )\n      {\n        var key = String( model.$key() );\n\n        function onRemove(response)\n        {\n          Rekord.debug( Debugs.POUCH_REMOVE, database, model, key, response );\n\n          if ( response.ok )\n          {\n            success( {} );\n          }\n          else\n          {\n            failure( {}, response.status );\n          }\n        }\n\n        function onRemoveError(err)\n        {\n          Rekord.debug( Debugs.POUCH_REMOVE_ERROR, database, model, key, err );\n\n          failure( {}, err.status );\n        }\n\n        pouch.remove( key ).then( onRemove ).catch( onRemoveError );\n      },\n\n      query: function( url, query, success, failure )\n      {\n        success( [] );\n      }\n\n    };\n  }\n\n  function LiveFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_live.call( this, database );\n    }\n\n    var pouch = this.pouch( database.name );\n    var options =\n    {\n      since: 'now',\n      live: true,\n      include_docs: true\n    };\n\n    function onLiveChange(change)\n    {\n      if ( change.deleted )\n      {\n        Rekord.debug( Debugs.POUCH_LIVE_REMOVE, database, change );\n\n        database.liveRemove( change.id );\n      }\n      else\n      {\n        if ( change.doc.$origin !== database.origin )\n        {\n          Rekord.debug( Debugs.POUCH_LIVE_SAVE, database, change );\n\n          database.liveSave( change.id, change.doc );\n        }\n        else\n        {\n          Rekord.debug( Debugs.POUCH_LIVE_SAVE_IGNORE, database, change );\n        }\n      }\n    }\n\n    pouch.changes( options ).on( 'change', onLiveChange );\n\n    return {\n      pouchdb: pouch,\n      save: Rekord.noop,\n      remove: Rekord.noop\n    };\n  }\n\n  Rekord.pouch = pouch;\n  Rekord.setRest( RestFactory );\n  Rekord.setLive( LiveFactory );\n\n})( this, this.PouchDB, this.Rekord );\n"],"sourceRoot":"/source/"}