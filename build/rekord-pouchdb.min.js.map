{"version":3,"sources":["pouchdb.js"],"names":["global","PouchDB","Rekord","undefined","pouch","name","options","cache","RestFactory","database","api","Rekord_rest","call","this","fullSave","Cache","None","origin","uuid","storeOptions","include_docs","replicate","live","retry","debug","Debugs","POUCH_INIT","pouchdb","all","success","failure","onAll","response","POUCH_ALL","values","i","rows","length","push","doc","onAllError","err","POUCH_ALL_ERROR","status","allDocs","then","get","model","onGet","POUCH_GET","key","_rev","onGetError","POUCH_GET_ERROR","String","$key","create","encoded","onCreate","POUCH_CREATE","ok","rev","onCreateError","POUCH_CREATE_ERROR","_id","$origin","put","update","onUpdate","POUCH_UPDATE","onUpdateError","POUCH_UPDATE_ERROR","remove","onRemove","POUCH_REMOVE","onRemoveError","POUCH_REMOVE_ERROR","query","url","LiveFactory","onLiveChange","change","deleted","POUCH_LIVE_REMOVE","liveRemove","id","POUCH_LIVE_SAVE","liveSave","POUCH_LIVE_SAVE_IGNORE","Rekord_live","since","changes","on","save","noop","rest","store","debugMap","setRest","setLive"],"mappings":"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","file":"rekord-pouchdb.min.js","sourcesContent":["(function(global, PouchDB, Rekord, undefined)\n{\n\n  var Debugs = Rekord.Debugs;\n\n  var cache = {};\n\n  var Rekord_live = Rekord.live;\n  var Rekord_rest = Rekord.rest;\n  var Rekord_store = Rekord.store;\n\n  Debugs.POUCH_INIT = 2000;\n  Debugs.POUCH_ALL = 2001;\n  Debugs.POUCH_ALL_ERROR = 2002;\n  Debugs.POUCH_GET = 2003;\n  Debugs.POUCH_GET_ERROR = 2004;\n  Debugs.POUCH_CREATE = 2005;\n  Debugs.POUCH_CREATE_ERROR = 2006;\n  Debugs.POUCH_UPDATE = 2007;\n  Debugs.POUCH_UPDATE_ERROR = 2008;\n  Debugs.POUCH_REMOVE = 2009;\n  Debugs.POUCH_REMOVE_ERROR = 2010;\n  Debugs.POUCH_LIVE_REMOVE = 2011;\n  Debugs.POUCH_LIVE_SAVE = 2012;\n  Debugs.POUCH_LIVE_SAVE_IGNORE = 2013;\n\n  if ( Rekord.debugMap )\n  {\n    Rekord.debugMap[ Debugs.POUCH_INIT ] = 'PouchDB Initialized';\n    Rekord.debugMap[ Debugs.POUCH_ALL ] = 'PouchDB All';\n    Rekord.debugMap[ Debugs.POUCH_ALL_ERROR ] = 'PouchDB All Error';\n    Rekord.debugMap[ Debugs.POUCH_GET ] = 'PouchDB Get';\n    Rekord.debugMap[ Debugs.POUCH_GET_ERROR ] = 'PouchDB Get Error';\n    Rekord.debugMap[ Debugs.POUCH_CREATE ] = 'PouchDB Create';\n    Rekord.debugMap[ Debugs.POUCH_CREATE_ERROR ] = 'PouchDB Create Error';\n    Rekord.debugMap[ Debugs.POUCH_UPDATE ] = 'PouchDB Update';\n    Rekord.debugMap[ Debugs.POUCH_UPDATE_ERROR ] = 'PouchDB Update Error';\n    Rekord.debugMap[ Debugs.POUCH_REMOVE ] = 'PouchDB Remove';\n    Rekord.debugMap[ Debugs.POUCH_REMOVE_ERROR ] = 'PouchDB Remove Error';\n    Rekord.debugMap[ Debugs.POUCH_LIVE_REMOVE ] = 'PouchDB Live Remove';\n    Rekord.debugMap[ Debugs.POUCH_LIVE_SAVE ] = 'PouchDB Live Save';\n    Rekord.debugMap[ Debugs.POUCH_LIVE_SAVE_IGNORE ] = 'PouchDB Live Save Ignored';\n  }\n\n  function pouch(name, options)\n  {\n    return name in cache ? cache[ name ] : cache[ name ] = new PouchDB( name, options );\n  }\n\n  function RestFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_rest.call( this, database );\n    }\n\n    database.fullSave = true;\n    database.cache = Rekord.Cache.None;\n    database.origin = Rekord.uuid();\n\n    var pouch = this.pouch( database.name, database.storeOptions );\n\n    var options = {\n      include_docs: true\n    };\n\n    PouchDB.replicate( database.name, database.api, {\n      live: true,\n      retry: true\n    });\n\n    Rekord.debug( Debugs.POUCH_INIT, database, pouch );\n\n    return {\n\n      pouchdb: pouch,\n\n      all: function( success, failure )\n      {\n        function onAll(response)\n        {\n          Rekord.debug( Debugs.POUCH_ALL, database, response );\n\n          var values = [];\n          for (var i = 0; i < response.rows.length; i++)\n          {\n            values.push( response.rows[ i ].doc );\n          }\n\n          success( values );\n        }\n\n        function onAllError(err)\n        {\n          Rekord.debug( Debugs.POUCH_ALL_ERROR, database, err );\n\n          failure( [], err.status );\n        }\n\n        pouch.allDocs( options ).then( onAll ).catch( onAllError );\n      },\n\n      get: function( model, success, failure )\n      {\n        var key = String( model.$key() );\n\n        function onGet(response)\n        {\n          Rekord.debug( Debugs.POUCH_GET, database, model, key, response );\n\n          model._rev = response._rev;\n          success( response );\n        }\n\n        function onGetError(err)\n        {\n          Rekord.debug( Debugs.POUCH_GET_ERROR, database, model, key, err );\n\n          failure( null, err.status );\n        }\n\n        pouch.get( key ).then( onGet ).catch( onGetError );\n      },\n\n      create: function( model, encoded, success, failure )\n      {\n        encoded._id = String( model.$key() );\n        encoded.$origin = database.origin;\n\n        function onCreate(response)\n        {\n          Rekord.debug( Debugs.POUCH_CREATE, database, model, encoded, response );\n\n          if ( response.ok )\n          {\n            model._rev = response.rev;\n            encoded._rev = response.rev;\n            success( {} );\n          }\n          else\n          {\n            failure( null, response.status );\n          }\n        }\n\n        function onCreateError(err)\n        {\n          Rekord.debug( Debugs.POUCH_CREATE_ERROR, database, model, encoded, err );\n\n          failure( null, err.status );\n        }\n\n        pouch.put( encoded ).then( onCreate ).catch( onCreateError );\n      },\n\n      update: function( model, encoded, success, failure )\n      {\n        encoded._id = String( model.$key() );\n        encoded._rev = model._rev;\n        encoded.$origin = database.origin;\n\n        function onUpdate(response)\n        {\n          Rekord.debug( Debugs.POUCH_UPDATE, database, model, encoded, response );\n\n          if ( response.ok )\n          {\n            model._rev = response.rev;\n            encoded._rev = response.rev;\n            success( {} );\n          }\n          else\n          {\n            failure( null, response.status );\n          }\n        }\n\n        function onUpdateError(err)\n        {\n          Rekord.debug( Debugs.POUCH_UPDATE_ERROR, database, model, encoded, err );\n\n          failure( null, err.status );\n        }\n\n        pouch.put( encoded ).then( onUpdate ).catch( onUpdateError );\n      },\n\n      remove: function( model, success, failure )\n      {\n        var key = String( model.$key() );\n\n        function onRemove(response)\n        {\n          Rekord.debug( Debugs.POUCH_REMOVE, database, model, key, response );\n\n          if ( response.ok )\n          {\n            success( {} );\n          }\n          else\n          {\n            failure( {}, response.status );\n          }\n        }\n\n        function onRemoveError(err)\n        {\n          Rekord.debug( Debugs.POUCH_REMOVE_ERROR, database, model, key, err );\n\n          failure( {}, err.status );\n        }\n\n        pouch.remove( key ).then( onRemove ).catch( onRemoveError );\n      },\n\n      query: function( url, query, success, failure )\n      {\n        success( [] );\n      }\n\n    };\n  }\n\n  function LiveFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_live.call( this, database );\n    }\n\n    var pouch = this.pouch( database.name );\n    var options =\n    {\n      since: 'now',\n      live: true,\n      include_docs: true\n    };\n\n    function onLiveChange(change)\n    {\n      if ( change.deleted )\n      {\n        Rekord.debug( Debugs.POUCH_LIVE_REMOVE, database, change );\n\n        database.liveRemove( change.id );\n      }\n      else\n      {\n        if ( change.doc.$origin !== database.origin )\n        {\n          Rekord.debug( Debugs.POUCH_LIVE_SAVE, database, change );\n\n          database.liveSave( change.id, change.doc );\n        }\n        else\n        {\n          Rekord.debug( Debugs.POUCH_LIVE_SAVE_IGNORE, database, change );\n        }\n      }\n    }\n\n    pouch.changes( options ).on( 'change', onLiveChange );\n\n    return {\n      pouchdb: pouch,\n      save: Rekord.noop,\n      remove: Rekord.noop\n    };\n  }\n\n  Rekord.pouch = pouch;\n  Rekord.setRest( RestFactory );\n  Rekord.setLive( LiveFactory );\n\n})( this, this.PouchDB, this.Rekord );\n"],"sourceRoot":"/source/"}