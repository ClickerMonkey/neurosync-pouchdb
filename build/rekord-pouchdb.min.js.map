{"version":3,"sources":["rekord-pouchdb.min.js"],"names":["root","factory","define","amd","Rekord","PouchDB","module","exports","global","require","this","undefined","pouch","name","options","cache","RestFactory","database","api","Rekord_rest","call","fullSave","Cache","None","origin","uuid","storeOptions","include_docs","replicate","live","retry","debug","Debugs","POUCH_INIT","pouchdb","all","extraOptions","success","failure","onAll","response","POUCH_ALL","values","i","rows","length","push","doc","onAllError","err","POUCH_ALL_ERROR","status","allOptions","isObject","transfer","copy","allDocs","then","get","model","onGet","POUCH_GET","key","_rev","onGetError","POUCH_GET_ERROR","String","$key","create","encoded","onCreate","POUCH_CREATE","ok","rev","onCreateError","POUCH_CREATE_ERROR","_id","$origin","put","update","onUpdate","POUCH_UPDATE","onUpdateError","POUCH_UPDATE_ERROR","remove","onRemove","POUCH_REMOVE","onRemoveError","POUCH_REMOVE_ERROR","query","url","LiveFactory","onLiveChange","change","deleted","POUCH_LIVE_REMOVE","liveRemove","id","POUCH_LIVE_SAVE","liveSave","POUCH_LIVE_SAVE_IGNORE","Rekord_live","since","changes","on","save","noop","rest","store","debugMap","Rests","Pouch","setRest","Lives","setLive"],"mappings":"CAEC,SAAUA,EAAMC,GAEO,kBAAXC,SAAyBA,OAAOC,IAGzCD,QAAQ,SAAU,WAAY,SAASE,EAAQC,GAC7C,MAAOJ,GAAQD,EAAMI,EAAQC,KAGN,gBAAXC,SAAuBA,OAAOC,QAK5CD,OAAOC,QAAUN,EAAQO,OAAQC,QAAQ,UAAWA,QAAQ,YAK5DT,EAAKI,OAASH,EAAQD,EAAMA,EAAKI,OAAQJ,EAAKK,UAEhDK,KAAM,SAASF,EAAQJ,EAAQC,EAASM,GAgDxC,QAASC,GAAMC,EAAMC,GAEnB,MAAOD,KAAQE,GAAQA,EAAOF,GAASE,EAAOF,GAAS,GAAIR,GAASQ,EAAMC,GAG5E,QAASE,GAAYC,GAEnB,IAAMA,EAASC,IAEb,MAAOC,GAAYC,KAAMV,KAAMO,EAGjCA,GAASI,UAAW,EACpBJ,EAASF,MAAQX,EAAOkB,MAAMC,KAC9BN,EAASO,OAASpB,EAAOqB,MAEzB,IAAIb,GAAQF,KAAKE,MAAOK,EAASJ,KAAMI,EAASS,cAE5CZ,GACFa,cAAc,EAUhB,OAPAtB,GAAQuB,UAAWX,EAASJ,KAAMI,EAASC,KACzCW,MAAM,EACNC,OAAO,IAGT1B,EAAO2B,MAAOC,EAAOC,WAAYhB,EAAUL,IAIzCsB,QAAStB,EAETuB,IAAK,SAAUC,EAAcC,EAASC,GAEpC,QAASC,GAAMC,GAEbpC,EAAO2B,MAAOC,EAAOS,UAAWxB,EAAUuB,EAG1C,KAAK,GADDE,MACKC,EAAI,EAAGA,EAAIH,EAASI,KAAKC,OAAQF,IAExCD,EAAOI,KAAMN,EAASI,KAAMD,GAAII,IAGlCV,GAASK,GAGX,QAASM,GAAWC,GAElB7C,EAAO2B,MAAOC,EAAOkB,gBAAiBjC,EAAUgC,GAEhDX,KAAaW,EAAIE,QAGnB,GAAIC,GAAatC,CAEZuC,GAAUjB,KAEbgB,EAAaE,EAAUlB,EAAcmB,EAAMH,KAG7CxC,EAAM4C,QAASJ,GAAaK,KAAMlB,GAAlC3B,SAAiDoC,IAGnDU,IAAK,SAAUC,EAAOvB,EAAcC,EAASC,GAI3C,QAASsB,GAAMpB,GAEbpC,EAAO2B,MAAOC,EAAO6B,UAAW5C,EAAU0C,EAAOG,EAAKtB,GAEtDmB,EAAMI,KAAOvB,EAASuB,KACtB1B,EAASG,GAGX,QAASwB,GAAWf,GAElB7C,EAAO2B,MAAOC,EAAOiC,gBAAiBhD,EAAU0C,EAAOG,EAAKb,GAE5DX,EAAS,KAAMW,EAAIE,QAdrB,GAAIW,GAAMI,OAAQP,EAAMQ,OAiBxBvD,GAAM8C,IAAKI,GAAML,KAAMG,GAAvBhD,SAAsCoD,IAGxCI,OAAQ,SAAUT,EAAOU,EAASjC,EAAcC,EAASC,GAKvD,QAASgC,GAAS9B,GAEhBpC,EAAO2B,MAAOC,EAAOuC,aAActD,EAAU0C,EAAOU,EAAS7B,GAExDA,EAASgC,IAEZb,EAAMI,KAAOvB,EAASiC,IACtBJ,EAAQN,KAAOvB,EAASiC,IACxBpC,OAIAC,EAAS,KAAME,EAASW,QAI5B,QAASuB,GAAczB,GAErB7C,EAAO2B,MAAOC,EAAO2C,mBAAoB1D,EAAU0C,EAAOU,EAASpB,GAEnEX,EAAS,KAAMW,EAAIE,QAvBrBkB,EAAQO,IAAMV,OAAQP,EAAMQ,QAC5BE,EAAQQ,QAAU5D,EAASO,OAyB3BZ,EAAMkE,IAAKT,GAAUZ,KAAMa,GAA3B1D,SAA6C8D,IAG/CK,OAAQ,SAAUpB,EAAOU,EAASjC,EAAcC,EAASC,GAMvD,QAAS0C,GAASxC,GAEhBpC,EAAO2B,MAAOC,EAAOiD,aAAchE,EAAU0C,EAAOU,EAAS7B,GAExDA,EAASgC,IAEZb,EAAMI,KAAOvB,EAASiC,IACtBJ,EAAQN,KAAOvB,EAASiC,IACxBpC,OAIAC,EAAS,KAAME,EAASW,QAI5B,QAAS+B,GAAcjC,GAErB7C,EAAO2B,MAAOC,EAAOmD,mBAAoBlE,EAAU0C,EAAOU,EAASpB,GAEnEX,EAAS,KAAMW,EAAIE,QAxBrBkB,EAAQO,IAAMV,OAAQP,EAAMQ,QAC5BE,EAAQN,KAAOJ,EAAMI,KACrBM,EAAQQ,QAAU5D,EAASO,OAyB3BZ,EAAMkE,IAAKT,GAAUZ,KAAMuB,GAA3BpE,SAA6CsE,IAG/CE,OAAQ,SAAUzB,EAAOvB,EAAcC,EAASC,GAI9C,QAAS+C,GAAS7C,GAEhBpC,EAAO2B,MAAOC,EAAOsD,aAAcrE,EAAU0C,EAAOG,EAAKtB,GAEpDA,EAASgC,GAEZnC,MAIAC,KAAaE,EAASW,QAI1B,QAASoC,GAActC,GAErB7C,EAAO2B,MAAOC,EAAOwD,mBAAoBvE,EAAU0C,EAAOG,EAAKb,GAE/DX,KAAaW,EAAIE,QApBnB,GAAIW,GAAMI,OAAQP,EAAMQ,OAuBxBvD,GAAMwE,OAAQtB,GAAML,KAAM4B,GAA1BzE,SAA4C2E,IAG9CE,MAAO,SAAUC,EAAKD,EAAOrD,EAAcC,EAASC,GAElDD,QAMN,QAASsD,GAAY1E,GAenB,QAAS2E,GAAaC,GAEfA,EAAOC,SAEV1F,EAAO2B,MAAOC,EAAO+D,kBAAmB9E,EAAU4E,GAElD5E,EAAS+E,WAAYH,EAAOI,KAIvBJ,EAAO9C,IAAI8B,UAAY5D,EAASO,QAEnCpB,EAAO2B,MAAOC,EAAOkE,gBAAiBjF,EAAU4E,GAEhD5E,EAASkF,SAAUN,EAAOI,GAAIJ,EAAO9C,MAIrC3C,EAAO2B,MAAOC,EAAOoE,uBAAwBnF,EAAU4E,GA/B7D,IAAM5E,EAASC,IAEb,MAAOmF,GAAYjF,KAAMV,KAAMO,EAGjC,IAAIL,GAAQF,KAAKE,MAAOK,EAASJ,MAC7BC,GAEFwF,MAAO,MACPzE,MAAM,EACNF,cAAc,EA4BhB,OAFAf,GAAM2F,QAASzF,GAAU0F,GAAI,SAAUZ,IAGrC1D,QAAStB,EACT6F,KAAMrG,EAAOsG,KACbtB,OAAQhF,EAAOsG,MAlRnB,GAAI1E,GAAS5B,EAAO4B,OAEhBjB,KAEAsF,EAAcjG,EAAOyB,KACrBV,EAAcf,EAAOuG,KAGrBrD,GAFelD,EAAOwG,MAEXxG,EAAOkD,UAClBC,EAAOnD,EAAOmD,KACdF,EAAWjD,EAAOiD,QAoRtB,OAlRArB,GAAOC,WAAa,IACpBD,EAAOS,UAAY,KACnBT,EAAOkB,gBAAkB,KACzBlB,EAAO6B,UAAY,KACnB7B,EAAOiC,gBAAkB,KACzBjC,EAAOuC,aAAe,KACtBvC,EAAO2C,mBAAqB,KAC5B3C,EAAOiD,aAAe,KACtBjD,EAAOmD,mBAAqB,KAC5BnD,EAAOsD,aAAe,KACtBtD,EAAOwD,mBAAqB,KAC5BxD,EAAO+D,kBAAoB,KAC3B/D,EAAOkE,gBAAkB,KACzBlE,EAAOoE,uBAAyB,KAE3BhG,EAAOyG,WAEVzG,EAAOyG,SAAU7E,EAAOC,YAAe,sBACvC7B,EAAOyG,SAAU7E,EAAOS,WAAc,cACtCrC,EAAOyG,SAAU7E,EAAOkB,iBAAoB,oBAC5C9C,EAAOyG,SAAU7E,EAAO6B,WAAc,cACtCzD,EAAOyG,SAAU7E,EAAOiC,iBAAoB,oBAC5C7D,EAAOyG,SAAU7E,EAAOuC,cAAiB,iBACzCnE,EAAOyG,SAAU7E,EAAO2C,oBAAuB,uBAC/CvE,EAAOyG,SAAU7E,EAAOiD,cAAiB,iBACzC7E,EAAOyG,SAAU7E,EAAOmD,oBAAuB,uBAC/C/E,EAAOyG,SAAU7E,EAAOsD,cAAiB,iBACzClF,EAAOyG,SAAU7E,EAAOwD,oBAAuB,uBAC/CpF,EAAOyG,SAAU7E,EAAO+D,mBAAsB,sBAC9C3F,EAAOyG,SAAU7E,EAAOkE,iBAAoB,oBAC5C9F,EAAOyG,SAAU7E,EAAOoE,wBAA2B,6BA4OrDhG,EAAOQ,MAAQA,EAEfR,EAAO0G,MAAMC,MAAQ/F,EACrBZ,EAAO4G,QAAShG,GAEhBZ,EAAO6G,MAAMF,MAAQpB,EACrBvF,EAAO8G,QAASvB,GAETvF","file":"rekord-pouchdb.min.js","sourcesContent":["/* rekord-pouchdb 1.5.6 - A rekord binding to pouchdb - implementing Rekord.rest, Rekord.live, & Rekord.store by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define(['rekord', 'pouchdb'], function(Rekord, PouchDB) { // jshint ignore:line\n      return factory(root, Rekord, PouchDB);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global, require('rekord'), require('pouchdb'));  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Rekord = factory(root, root.Rekord, root.PouchDB);\n  }\n}(this, function(global, Rekord, PouchDB, undefined)\n{\n\n  var Debugs = Rekord.Debugs;\n\n  var cache = {};\n\n  var Rekord_live = Rekord.live;\n  var Rekord_rest = Rekord.rest;\n  var Rekord_store = Rekord.store;\n\n  var transfer = Rekord.transfer;\n  var copy = Rekord.copy;\n  var isObject = Rekord.isObject;\n\n  Debugs.POUCH_INIT = 2000;\n  Debugs.POUCH_ALL = 2001;\n  Debugs.POUCH_ALL_ERROR = 2002;\n  Debugs.POUCH_GET = 2003;\n  Debugs.POUCH_GET_ERROR = 2004;\n  Debugs.POUCH_CREATE = 2005;\n  Debugs.POUCH_CREATE_ERROR = 2006;\n  Debugs.POUCH_UPDATE = 2007;\n  Debugs.POUCH_UPDATE_ERROR = 2008;\n  Debugs.POUCH_REMOVE = 2009;\n  Debugs.POUCH_REMOVE_ERROR = 2010;\n  Debugs.POUCH_LIVE_REMOVE = 2011;\n  Debugs.POUCH_LIVE_SAVE = 2012;\n  Debugs.POUCH_LIVE_SAVE_IGNORE = 2013;\n\n  if ( Rekord.debugMap )\n  {\n    Rekord.debugMap[ Debugs.POUCH_INIT ] = 'PouchDB Initialized';\n    Rekord.debugMap[ Debugs.POUCH_ALL ] = 'PouchDB All';\n    Rekord.debugMap[ Debugs.POUCH_ALL_ERROR ] = 'PouchDB All Error';\n    Rekord.debugMap[ Debugs.POUCH_GET ] = 'PouchDB Get';\n    Rekord.debugMap[ Debugs.POUCH_GET_ERROR ] = 'PouchDB Get Error';\n    Rekord.debugMap[ Debugs.POUCH_CREATE ] = 'PouchDB Create';\n    Rekord.debugMap[ Debugs.POUCH_CREATE_ERROR ] = 'PouchDB Create Error';\n    Rekord.debugMap[ Debugs.POUCH_UPDATE ] = 'PouchDB Update';\n    Rekord.debugMap[ Debugs.POUCH_UPDATE_ERROR ] = 'PouchDB Update Error';\n    Rekord.debugMap[ Debugs.POUCH_REMOVE ] = 'PouchDB Remove';\n    Rekord.debugMap[ Debugs.POUCH_REMOVE_ERROR ] = 'PouchDB Remove Error';\n    Rekord.debugMap[ Debugs.POUCH_LIVE_REMOVE ] = 'PouchDB Live Remove';\n    Rekord.debugMap[ Debugs.POUCH_LIVE_SAVE ] = 'PouchDB Live Save';\n    Rekord.debugMap[ Debugs.POUCH_LIVE_SAVE_IGNORE ] = 'PouchDB Live Save Ignored';\n  }\n\n  function pouch(name, options)\n  {\n    return name in cache ? cache[ name ] : cache[ name ] = new PouchDB( name, options );\n  }\n\n  function RestFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_rest.call( this, database );\n    }\n\n    database.fullSave = true;\n    database.cache = Rekord.Cache.None;\n    database.origin = Rekord.uuid();\n\n    var pouch = this.pouch( database.name, database.storeOptions );\n\n    var options = {\n      include_docs: true\n    };\n\n    PouchDB.replicate( database.name, database.api, {\n      live: true,\n      retry: true\n    });\n\n    Rekord.debug( Debugs.POUCH_INIT, database, pouch );\n\n    return {\n\n      pouchdb: pouch,\n\n      all: function( extraOptions, success, failure )\n      {\n        function onAll(response)\n        {\n          Rekord.debug( Debugs.POUCH_ALL, database, response );\n\n          var values = [];\n          for (var i = 0; i < response.rows.length; i++)\n          {\n            values.push( response.rows[ i ].doc );\n          }\n\n          success( values );\n        }\n\n        function onAllError(err)\n        {\n          Rekord.debug( Debugs.POUCH_ALL_ERROR, database, err );\n\n          failure( [], err.status );\n        }\n\n        var allOptions = options;\n\n        if ( isObject( extraOptions ) )\n        {\n          allOptions = transfer( extraOptions, copy( allOptions ) );\n        }\n\n        pouch.allDocs( allOptions ).then( onAll ).catch( onAllError );\n      },\n\n      get: function( model, extraOptions, success, failure )\n      {\n        var key = String( model.$key() );\n\n        function onGet(response)\n        {\n          Rekord.debug( Debugs.POUCH_GET, database, model, key, response );\n\n          model._rev = response._rev;\n          success( response );\n        }\n\n        function onGetError(err)\n        {\n          Rekord.debug( Debugs.POUCH_GET_ERROR, database, model, key, err );\n\n          failure( null, err.status );\n        }\n\n        pouch.get( key ).then( onGet ).catch( onGetError );\n      },\n\n      create: function( model, encoded, extraOptions, success, failure )\n      {\n        encoded._id = String( model.$key() );\n        encoded.$origin = database.origin;\n\n        function onCreate(response)\n        {\n          Rekord.debug( Debugs.POUCH_CREATE, database, model, encoded, response );\n\n          if ( response.ok )\n          {\n            model._rev = response.rev;\n            encoded._rev = response.rev;\n            success( {} );\n          }\n          else\n          {\n            failure( null, response.status );\n          }\n        }\n\n        function onCreateError(err)\n        {\n          Rekord.debug( Debugs.POUCH_CREATE_ERROR, database, model, encoded, err );\n\n          failure( null, err.status );\n        }\n\n        pouch.put( encoded ).then( onCreate ).catch( onCreateError );\n      },\n\n      update: function( model, encoded, extraOptions, success, failure )\n      {\n        encoded._id = String( model.$key() );\n        encoded._rev = model._rev;\n        encoded.$origin = database.origin;\n\n        function onUpdate(response)\n        {\n          Rekord.debug( Debugs.POUCH_UPDATE, database, model, encoded, response );\n\n          if ( response.ok )\n          {\n            model._rev = response.rev;\n            encoded._rev = response.rev;\n            success( {} );\n          }\n          else\n          {\n            failure( null, response.status );\n          }\n        }\n\n        function onUpdateError(err)\n        {\n          Rekord.debug( Debugs.POUCH_UPDATE_ERROR, database, model, encoded, err );\n\n          failure( null, err.status );\n        }\n\n        pouch.put( encoded ).then( onUpdate ).catch( onUpdateError );\n      },\n\n      remove: function( model, extraOptions, success, failure )\n      {\n        var key = String( model.$key() );\n\n        function onRemove(response)\n        {\n          Rekord.debug( Debugs.POUCH_REMOVE, database, model, key, response );\n\n          if ( response.ok )\n          {\n            success( {} );\n          }\n          else\n          {\n            failure( {}, response.status );\n          }\n        }\n\n        function onRemoveError(err)\n        {\n          Rekord.debug( Debugs.POUCH_REMOVE_ERROR, database, model, key, err );\n\n          failure( {}, err.status );\n        }\n\n        pouch.remove( key ).then( onRemove ).catch( onRemoveError );\n      },\n\n      query: function( url, query, extraOptions, success, failure )\n      {\n        success( [] );\n      }\n\n    };\n  }\n\n  function LiveFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_live.call( this, database );\n    }\n\n    var pouch = this.pouch( database.name );\n    var options =\n    {\n      since: 'now',\n      live: true,\n      include_docs: true\n    };\n\n    function onLiveChange(change)\n    {\n      if ( change.deleted )\n      {\n        Rekord.debug( Debugs.POUCH_LIVE_REMOVE, database, change );\n\n        database.liveRemove( change.id );\n      }\n      else\n      {\n        if ( change.doc.$origin !== database.origin )\n        {\n          Rekord.debug( Debugs.POUCH_LIVE_SAVE, database, change );\n\n          database.liveSave( change.id, change.doc );\n        }\n        else\n        {\n          Rekord.debug( Debugs.POUCH_LIVE_SAVE_IGNORE, database, change );\n        }\n      }\n    }\n\n    pouch.changes( options ).on( 'change', onLiveChange );\n\n    return {\n      pouchdb: pouch,\n      save: Rekord.noop,\n      remove: Rekord.noop\n    };\n  }\n\n  Rekord.pouch = pouch;\n\n  Rekord.Rests.Pouch = RestFactory;\n  Rekord.setRest( RestFactory );\n\n  Rekord.Lives.Pouch = LiveFactory;\n  Rekord.setLive( LiveFactory );\n\n  return Rekord;\n\n}));\n"],"sourceRoot":"/source/"}